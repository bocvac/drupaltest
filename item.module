<?php
// $Id$

function item_system($field) {
  $system["description"] = t("Enables items for feeds.");
  return $system[$field];
}

function item_node($field) {
  $info["name"] = t("news item");
  $info["description"] = t("A news item is an item that is part of an RSS feed.");

  return $info[$field];
}

function item_access($op, $node) {
  global $user;

  if ($op == "view") {
    return $node->status && user_access("access news feeds");
  }

  if ($op == "create") {
    return user_access("administer news feeds");
  }

  if ($op == "update") {
    return user_access("administer news feeds");
  }

  if ($op == "delete") {
    return user_access("administer news feeds");
  }

}

function item_get_fieldnames($op = '', $node = 0) {
  return array("commentsurl", "name"); // for future extension
}

function item_save($op, $node) {
  $save_fields = item_get_fieldnames($op, $node); // adjust to own needs

  if ($op == "approve") {
    return array("promote" => 1, "status" => 1);
  }

  if ($op == "create") {
    if (user_access("administer news feeds")) {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "parent", "link", "guid", "weight");
    }
    else {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "moderate" => "1", "promote" => 0, "parent", "link", "guid", "weight");
    }

    return array_merge($main_fields, $save_fields);
  }

  if ($op == "decline") {
    return array("promote" => 0, "status" => 0);
  }

  if ($op == "update") {
    if (user_access("administer news feeds")) {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "parent", "link", "guid");
    }
    else {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "moderate" => "1", "promote" => 0, "parent", "link", "guid");
    }

    return array_merge($main_fields, $save_fields);
  }
}

function _item_pack_fields($node) {
  $fields = item_get_fieldnames();
  $data = array();

  foreach ($fields as $field) {
    $data[$field] = $node->$field;
  }

  return serialize($data);
}

function item_insert($node) {
  $data = _item_pack_fields($node);

  db_query("INSERT INTO item (nid, parent, weight, link, guid, data) VALUES('%d', '%d', '%d', '%s', '%s', '%s')", $node->nid, $node->parent, $node->weight, $node->link, $node->guid, $data); 
}

function item_update($node) {
  $data = _item_pack_fields($node);

  db_query("UPDATE item SET parent = '%d', link = '%s', guid = '%s', data = '%s' WHERE nid = '%d'", $node->parent, $node->link, $node->guid, $data, $node->nid);
}

function item_delete($node) {
  db_query("DELETE FROM item WHERE nid = '%d'", $node->nid);
}

function item_load($node) {
  $item = db_fetch_object(db_query("SELECT parent, weight, guid, link, data FROM item WHERE nid = '%d'", $node->nid));

  $data = unserialize($item->data);

  foreach ($data as $field => $field_value) {
    $item->$field = $field_value;
  }

  unset($item->data);

  return $item;
}

function item_form_fields(&$node, &$help, &$error) {
  $output = form_textfield(t("Comment(s) URL"), "commentsurl", $node->commentsurl, 60, 1024, t("The link to the comments on the original news item."));

  return $output;
}

function item_form(&$node, &$help, &$error) {
  $output = "";

  if (!isset($node->weight)) {
    $node->weight = 0;
  }

  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("item", $node));
  }

  $output .= form_textarea(t("Body"), "body", $node->body, 60, 20);
  $output .= form_textfield(t("Link"), "link", $node->link, 60, 255, t("The (perma)link to the original source for this news item."));
  $output .= form_textfield(t("GUID"), "guid", $node->guid, 60, 255, t("The GUID for this news item.")); 
  $output .= form_select(t("Feed"), "parent", $node->parent, feed_get_feeds(), t("The feed that this news item belongs to."));

  $output .= item_form_fields($node, $help, $error);
 
  return $output;
}

function item_link($type, $node = 0, $main = 0) {
  global $user;

  $mod = arg(0);
  $op = arg(1);
  $id = arg(2);

  if (($type == "node") && ($node->type == "item") && ($node->link)) {
    if (($node->parent) && ($mod != "node") && ($id != $node->parent)) {
      $links[] = l(t("feed"), "node/view/$node->parent", array("title" => t("Read more news from this feed.")));
    }
    $links[] = "<a href=\"". $node->link ."\" target=\"_new\">". t("read more") ."</a>";
  }

  if (($type == "node") && ($node->type == "item") && ($node->commentsurl)) {
    $links[] = "<a href=\"". $node->commentsurl ."\" target=\"_new\">". t("read comments") ."</a>";
  }

  return $links ? $links : array();
}

// $feed is the feed *node* 
// $item is an item from the feedparser
function item_new($feed, $item) {
  global $user;

  $title = $item["title"] ? $item["title"] : $feed->title; 
  $guid = $item["guid"] ? $item["guid"] : "";
  $body = $item["description"] ? $item["description"] : "";
  $created = $item["locdate"] ? $item["locdate"] : time();
  $link = $item["link"] ? $item["link"] : $feed->link;
  $weight = $item["locdate"] ? 0 : array_shift(db_fetch_array(db_query("SELECT MAX(weight)+1 AS newweight FROM item WHERE parent = '%s'", $feed->nid)));
  $name = $item["author"] ? $item["author"] : $feed->creator;

  $fields = array("type" => "item", "title" => $title, "teaser" => $body, "body" => $body, "status" => 1, "moderate" => 0, "comment" => $feed->items_comment, "promote" => $feed->items_promote, "revision" => 0, "guid" => $guid, "link" => $link, "parent" => $feed->nid, "created" => $created, "weight" => $weight, "commentsurl" => $item["comments"], "name" => $name, "taxonomy" => array_keys(taxonomy_node_get_terms($feed->nid)));
  
  $node = node_validate($fields, $error);

  if (!$node->error) {
    if (node_access("create", $node)) {
      $nid = node_save($node, array_merge($fields, module_invoke($node->type, "save", "create", $node)));
      if (!$nid) {
        watchdog("error", "could not create news item");
      }
      else {
        $node->taxonomy = array_keys(taxonomy_node_get_terms($feed->nid));
        if (function_exists("taxonomy_node_save")) {
          taxonomy_node_save($nid, $node->taxonomy);
        }
      }
    }
    else {
      watchdog("error", "insufficient rights to create news item");
    }
  }
  else {
    watchdog("error", "validation of news item failed: $node->error");
  } 
}

// feed is *node*
// item is from feedparser
function item_find($feed, $item) {
  global $user;

  $title = substr($item["title"] ? $item["title"] : $feed->title, 0, 128); 
  $guid = $item["guid"] ? $item["guid"] : "";
  $body = filter($item["description"] ? $item["description"] : "");
  $link = $item["link"] ? $item["link"] : $feed->link;

  if ($guid != "") {
    $result = db_query("SELECT n.nid FROM node n, item i WHERE (n.type = \"item\") AND (n.nid = i.nid) AND (i.parent = '%d') AND (i.guid = '%s')", $feed->nid, $guid);
  }
  else if ($link == "") {
    $result = db_query("SELECT n.nid FROM node n, item i WHERE (n.type = \"item\") AND (n.nid = i.nid) AND (i.parent = '%d') AND (n.title = '%s') AND (n.body = '%s')", $feed->nid, $title, $body);
  }
  else {
    $result = db_query("SELECT n.nid FROM node n, item i WHERE (n.type = \"item\") AND (n.nid = i.nid) AND (i.parent = '%d') AND (i.link = '%s') AND (n.title = '%s')", $feed->nid, $link, $title);
  }

  return db_fetch_object($result);
}

// feed is *node*
// node is (old) item from feed
// item is from feedparser
function item_renew($feed, $node, $item) {
  global $user;

  $title = $item["title"] ? $item["title"] : $feed->title;
  $guid = $item["guid"] ? $item["guid"] : "";
  $body = $item["description"] ? $item["description"] : "";
  $link = $item["link"] ? $item["link"] : $feed->link;
  $name = $item["author"] ? $item["author"] : $feed->creator;

  $node->title = $title; // don't really need to check since it's either different (need for update) or the same
  $node->guid = ($guid == "") ? $node->guid : $guid;
  $node->body = $body;
  $node->link = $link;
  $node->commentsurl = $item["comments"];
  $node->name = $name;

  $node->taxonomy = array_keys(taxonomy_node_get_terms($feed->nid));

  node_submit($node);
  if (function_exists("taxonomy_node_save")) {
    taxonomy_node_save($node->nid, $node->taxonomy);
  }

}

// feed is *node*
// item is from feedparser
function item_parse($feed, $item) {
  $found = item_find($feed, $item);

  if (!$found) {
    item_new($feed, $item);
  }
  else {
    item_renew($feed, node_load(array("nid" => $found->nid)), $item);
  }
}

function item_theme_pageitem($node) {


  theme("node", $node, 0);
}

function item_page_last($result) {
  global $user;

  theme("header");

  while ($node = db_fetch_object($result)) {
    theme("item_theme_pageitem", node_load(array("nid" => $node->nid)));
  }

  print pager_display("", ($user->nodes ? $user->nodes : variable_get("default_nodes_main", 10)), 0);

  print "<div align=\"right\">". l("<img src=\"". theme("image", "xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" />", "item/feed", array("title" => t("See these items in XML format."))) ."</div>\n";

  theme("footer");
}

function item_feed_last($result) {
  global $from;

  node_feed($result, array("title" => t("%site : Latest news", array("%site" => variable_get("site_name", "drupal"))), "link" => url("item/"), "description" => t("The latest syndicated news from %site", array("%site" => variable_get("site_name", "drupal")))));
}

function item_page() {
  global $user;

  $op = arg(1);

  if (user_access("access news feeds")) {
    switch ($op) {
      case "page":
      case "feed":
      default:
        $result = pager_query("SELECT n.nid AS nid FROM node n, item i WHERE (i.nid = n.nid) AND (n.status = 1) ORDER BY created DESC, title DESC", ($user->nodes ? $user->nodes : variable_get("default_nodes_main", 10)), 0);
        if ($op == "feed") {
          item_feed_last($result);
        }
        else {
          item_page_last($result);
        }
    }
  }
  else {
    message_na();
  }
}

function item_import($op) {
  if ($op == "items") {
    $result = db_query("SELECT n.nid AS nid FROM node n, item i WHERE (i.nid = n.nid) AND (n.status = 1) ORDER BY created DESC, title DESC");
    while ($node = db_fetch_object($result)) {
      $nodes[] = $node->nid;
    }
    return $nodes; 
  }
}
?>
