<?php
// $Id$

function feed_system($field) {
  $system["description"] = t("Enables RSS feeds.");
  return $system[$field];
}

function feed_node($field) {
  $info["name"] = t("news feed");
  $info["description"] = t("A news feed is a source of news from other site(s).");

  return $info[$field];
}

function feed_help($section = "admin/system/feeds") {
  switch ($section) {
    case "admin/system/feeds":
      $output = "<p>This page is designed for creation and administration of news feeds. Here you can add new feeds, modify individual settings, and update the content contained in each feed.</p>";
      $output .= "<p>In order to add a feed, you will need to enter the URL and click the \"Add feed\" button. If you wish to update the feed when you add it, simply leave the \"Do initial refresh\" checkbox checked. If you uncheck this box, the feed will not be initialized until you first click \"Refresh.\" If you wish to modify the default settings for feeds, you can do so via the ". l("feed defaults page", "admin/system/modules/feed").". Alternatively, you can modify the settings for each individual feed by clicking the \"administer\" link on this page.</p>";
      $output .= "<p>If your feed is working correctly, the number of news items that have been sucessfully fetched will then become visible in the items column of the feed overview. Note that most sites request a courtesy time between refreshes so their servers are not overloaded. Please be aware of this and set your feed refreshes accordingly.</p>";
      $output .="<p>Your newly created feed(s) will now show up in the list of blocks that you can see at the block related administration pages. There you can customize where and when your feed(s) will be displayed.</p>";
      break;
    case "admin/system/modules/feed":
      $output .= "<p>These are the <b>default</b> settings for new feeds added via the ". l("feed administration page", "admin/system/feeds") .". Set up your feed preferences properly here before you add feeds.</p>";
  }

  return $output;
}

function feed_perm() {
  return array("access news feeds", "administer news feeds");
}

function feed_access($op, $node) {
  global $user;

  if ($op == "view") {
    return $node->status && user_access("access news feeds");
  }

  if ($op == "create") {
    return user_access("administer news feeds");
  }

  if ($op == "update") {
    return user_access("administer news feeds");
  }

  if ($op == "delete") {
    return user_access("administer news feeds");
  }

}

function feed_settings() {
  $expires = array(0 => t("Never"), 604800 => t("One week"), 1209600 => t("Two weeks"), 2419200 => t("Four weeks"),7257600 => t("3 Months"),14515200 =>t("6 Months"),31449600 => t("One Year"));

  $output .= form_textfield(t("Update interval"), "feed_refresh", variable_get("feed_refresh", "60"), 10, 10, t("The refresh interval indicating how often you want to update this feed, in minutes.  Requires crontab."));
  $output .= form_select(t("Items expire in"), "feed_expire", variable_get("feed_expire", "2419200"), $expires, t("Indicate wether items from this feed should be automatically deleted."));
  $output .= form_select(t("Auto-promotion of news item is"), "feed_items_promote", variable_get("feed_items_promote", "0"), array(t("Disabled"), t("Enabled")));
  if (module_exist("queue")) {
    $output .= form_select(t("Moderation of news item"), "feed_items_moderate", variable_get("feed_items_moderate", "0"), array(("Disabled"), t("Enabled")));
  }
  if (module_exist("comment")) {
    $output .= form_select(t("Allow user comments on news items"), "feed_items_comment", variable_get("feed_items_comment", "0"), array(("Disabled"), t("Read only"), t("Read-write")));
  }
  return $output;
}

// future expansion
function feed_get_fields($op = '', $node = 0) {
  $fields =  array("creator", "last_mod", "etag", "items_promote");

  if (module_exist("queue")) {
    $fields[] = "items_moderate";
  }
  
  if (module_exist("comment")) {
    $fields[] = "items_comment";
  }

  return $fields;
}

function feed_save($op, $node) {
  $save_fields = feed_get_fields($op, $node); // adjust to own needs

  if ($op == "create") {
    if (user_access("administer news feeds")) {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "url", "refresh", "link", "expire");
    }
    else {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "moderate" => "1", "promote" => 0, "comments" => "0", "url", "refresh", "link", "expire");
    }

    return array_merge($main_fields, $save_fields);
  }

  if ($op == "update") {
    if (user_access("administer news feeds")) {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "url", "refresh", "link", "expire");
    }
    else {
      $main_fields = array("body" => filter($node->body), "teaser" => filter($node->teaser), "moderate" => "1", "promote" => 0, "comments" => "0", "url", "refresh", "link", "expire");
    }

    return array_merge($main_fields, $save_fields);
  }
}

function _feed_pack_fields($node) {
  $fields = feed_get_fields();
  $data = array();

  foreach ($fields as $field) {
    $data[$field] = $node->$field;
  }

  return serialize($data);
}

function feed_insert($node) {
  $data = _feed_pack_fields($node);

  db_query("INSERT INTO {feed} (nid, url, refresh, link, expire, data) VALUES('%d', '%s', '%d', '%s', '%d', '%s')", $node->nid, $node->url, $node->refresh, $node->link, $node->expire, $data);
}

function feed_update($node) {
  $data = _feed_pack_fields($node);

  db_query("UPDATE {feed} SET url = '%s', refresh = '%d', link = '%s', expire = '%d', data = '%s' WHERE nid = '%d'", $node->url, $node->refresh, $node->link, $node->expire, $data, $node->nid);
}

function feed_delete($node) {
  $result = db_query("SELECT * FROM {item} WHERE parent = '%d'", $node->nid);

  while ($item = db_fetch_object($result)) {
    node_delete(array("nid" => $item->nid, "confirm" => 1));
  }

  db_query("DELETE FROM {feed} WHERE nid = '%d'", $node->nid);
}

function feed_load($node) {
  $feed = db_fetch_object(db_query("SELECT url, refresh, link, expire, data FROM {feed} WHERE nid = '%d'", $node->nid));

  $data = unserialize($feed->data);

  foreach ($data as $field => $field_value) {
    $feed->$field = $field_value;
  }

  unset($feed->data);

  return $feed;
}

function _feed_get($url, &$feed) {
  $data = "";

  // TODO: etag support thingie somehow
  if (function_exists("curl_version")) {
    // use curl if available
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HEADER, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    if (!is_null($feed)) {
      // here comes some of the magic etag stuff
     if (isset($feed->last_mod) && isset($feed->etag) && ($feed->last_mod != "") && ($feed->etag != "")) {
       curl_setopt($ch, CURLOPT_HTTPHEADER, array("If-Modified-Since: $feed->last_mod" , "If-None-Match: $feed->etag"));
     }
    }
    $data = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($http_code == 304) {
      $data = "";
    }
    else {
      // save the return header for etags
      $lines = split("\n", $data);
      // first loop through all the headers
      $line = "";
      do {
        $line = chop(array_shift($lines)); // chop off the \n
        if (strncmp($line, "Last-Modified:", 14) == 0) {
          $feed->last_mod = preg_replace("/^Last-Modified:(\s*)/", "", $line);
        }
        if (strncmp($line, "ETag:", 5) == 0) {
          $feed->etag = preg_replace("/^ETag:(\s*)/", "", $line);
        }
      } while ($line != "");
      $data = join("", $lines);
    }
    curl_close($ch); 
  }
  else { 
    if ($fp = @fopen($url, "r")) {
      // fetch data:
      while (!feof($fp)) {
        $data .= fgets($fp, 128);
      }
      fclose($fp);
    }
  }

  return $data;
}

function feed_form(&$node, &$help, &$error) {
  global $edit;
  $expires = array(0 => t("Never"), 604800 => t("One week"), 1209600 => t("Two weeks"), 2419200 => t("Four weeks"),7257600 => t("3 Months"),14515200 =>t("6 Months"),31449600 => t("One Year"));

  $output = "";

  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("feed", $node));
  }
  $output .= form_textfield(t("Url"), "url", $node->url, 60, 255, t("The URL of the RSS feed."));
  $output .= form_textfield(t("Site link"), "link", $node->link, 60, 255);
  $output .= form_textarea(t("Description"), "body", $node->body, 55, 10, t("Phrase or sentence describing the channel."));
  $output .= form_textfield(t("Update interval"), "refresh", $node->refresh, 10, 10, t("The refresh interval indicating how often you want to update this feed, in minutes.  Requires crontab."));
  $output .= form_select(t("Items expire in"), "expire", $node->expire ? $node->expire : 0, $expires, t("Indicate wether items from this feed should be automatically deleted."));
  $output .= form_select(t("Auto-promotion of news item is"), "items_promote", $node->items_promote, array(t("Disabled"), t("Enabled")));
  if (module_exist("queue")) {
    $output .= form_select(t("Moderation of news item"), "items_moderate", $node->items_moderate, array(("Disabled"), t("Enabled")));
  }
  if (module_exist("comment")) {
    $output .= form_select(t("Allow user comments on news items"), "items_comment", $node->items_comment, array(("Disabled"), t("Read only"), t("Read-write")));
  }

  return $output;
}

function feed_link($type, $node = 0, $main = 0) {

  if (($type == "node") && ($node->type == "feed") && ($main)) {
    $links[] = l(t("read more"), "node/view/$node->nid", array("title" => t("Read more news from this feed.")));
  }

  if (($type == "system") && user_access("administer news feeds")) {
    menu("admin/system/feeds", t("feeds"), "feed_admin", 8);
  }

  return $links ? $links : array();
}

function theme_feed_header($node) {


  $output = t("<p><b>Website:</b><div style=\"margin-left: 20px\"><a href=\"%url\" target=\"_blank\">%url</a></div></p><br />\n", array("%url" => $node->link));
  $output .= t("<p><b>Description:</b><div style=\"margin-left: 20px\">%descr</div><br />\n", array("%descr" => check_output($node->body, 1)));
  $output .= t("<p><b>Last update:</b><div style=\"margin-left: 20px\">%time ago</div></p><br />\n", array("%time" => format_interval(time() - $node->changed)));
  $output .= "<div align=\"right\"><a href=\"$node->url\"><img src=\"". theme("image", "xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" /></a></div>\n";
  $output .= "<div>". theme("links", link_node($node, 0)) ."</div>";

  return theme("box", t(check_output($node->title)), $output);

}

function theme_feed_item($item) {
  return theme("node", $item, 0);
}

function feed_view($node, $main = 0) {
  if ($main) {
    $output = theme("node", $node, $main);
  }
  else {
    $result = pager_query("SELECT n.nid FROM {node} n, {item} i WHERE (n.nid = i.nid) AND (n.status = 1) AND (parent = '". $node->nid ."') ORDER BY i.weight DESC, n.created DESC", ($user->nodes ? $user->nodes : variable_get("default_nodes_main", 10)), 0);

    $output = theme("feed_header", $node);

    while ($item = db_fetch_object($result)) {
     $output .= theme("feed_item", node_load(array("nid" => $item->nid)));
    }

    $output .= theme("pager", "", ($user->nodes ? $user->nodes : variable_get("default_nodes_main", 10)), 0);
  }
  return $output;
}

function feed_refresh($feed) {
  $content = _feed_get($feed->url, $feed);
  if ($content != "") {
    $info = rss_parse($content);

    if (!$info) {
      watchdog("error", "while updating ". $feed->title);
      drupal_set_message(t("error while updating %t", array("%t" => $feed->title)));
    }
    else {
      if (isset($info->items)) { 
        foreach (array_reverse($info->items) as $item) {
          item_parse($feed, $item);
        }
      }
      if (function_exists("taxonomy_node_get_terms")) {
        $feed->taxonomy = array_keys(taxonomy_node_get_terms($feed->nid));
      }

      $feed->changed = time();

      node_submit($feed);
      drupal_set_message(t("feed successfully updated."));
    }
  }
}

function feed_expire($nid, $expire) {
  $result = db_query("SELECT n.nid FROM {item} i, {node} n WHERE (i.nid = n.nid) AND (i.parent = %d) AND ((n.changed + %d) < %d) ORDER BY n.nid", $nid, $expire, time());

  while ($item = db_fetch_object($result)) {
    node_delete(array("nid" => $item->nid, "confirm" => 1));
  }
}

function feed_cron() {
  global $user;

  $uid = $user->uid;
  $user->uid = 1;

  $result = db_query("SELECT n.nid AS nid FROM {node} n, {feed} f WHERE (n.nid = f.nid) AND (n.status = 1) AND ((n.changed + (f.refresh * 60)) < '%d')", time());

  while ($feed = db_fetch_object($result)) {
    feed_refresh(node_load(array("nid" => $feed->nid)));
  }

  $result = db_query("SELECT n.nid, f.expire FROM {node} n, {feed} f WHERE (n.nid = f.nid) AND (n.status = 1) AND (f.expire > 0) ORDER BY n.nid");

  while ($feed = db_fetch_object($result)) {
    feed_expire($feed->nid, $feed->expire);
  }

  $user->uid = $uid;
}

function theme_feed_pagefeed($node) {
  print theme("node", $node, 1);
}

function feed_page_feeds() {
  global $user;

  $result = pager_query("SELECT n.nid FROM {node} n, {feed} f WHERE (n.nid = f.nid) AND (n.status = 1) ORDER BY n.title", ($user->nodes ? $user->nodes : variable_get("default_nodes_main", 10)), 0);

  print theme("header");

  while ($node = db_fetch_object($result)) {
    print theme("feed_pagefeed", node_load(array("nid" => $node->nid)));
  }

  print "<div align=\"right\">". l("<img src=\"". theme("image", "xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" />", "feed/feed", array("title" => t("See the exported news feeds in XML format."))) ."</div>\n";
  print theme("pager", "", ($user->nodes ? $user->nodes : variable_get("default_nodes_main", 10)), 0);

  print theme("footer");
}

function feed_feed_feeds() {
  $result = db_query("SELECT n.title, f.url FROM {node} n, {feed} f WHERE (n.nid = f.nid) AND (n.status = 1) ORDER BY n.title");

  $output = "<?xml version=\"1.0\"?>\n\n";
  $output .= "<rssfeeds version=\"0.1\">\n\n";

  while ($feed = db_fetch_object($result)) {
    $output .= "<channel>\n";
    $output .= " <title>". htmlentities($feed->title) ."</title>\n";
    $output .= " <link>". htmlentities($feed->url) ."</link>\n";
    $output .= "</channel>\n\n";
  }

  $output .= "</rssfeeds>\n";

  header("Content-Type: text/xml");

  print $output;
}

function feed_page() {
  $op = arg(1);

  if (user_access("access news feeds")) {
    switch ($op) {
      case "feed":
        feed_feed_feeds();
        break;
      case "view":
      default:
        feed_page_feeds();
    }
  }
  else {
    message_na();
  }
}

function feed_admin() {
  global $edit;
  $edit = $_POST["edit"];

  if (user_access("administer news feeds")) {
    if (!module_exist("item")) {
      $output = theme("error", t("For the feed module to function properly please ensure that the item module is enabled in the ". l(t("modules configuration"), "admin/system/modules") ." page."));
    }
    else {
      switch ($edit["op"]) {
        case t("Add feed"):
          feed_add_from_url($edit["url"], $edit["update"]);
          break;
        case t("Refresh"):
          feed_refresh(node_load(array("nid" => $edit["nid"])));
          break;
      }
      $add_form = form_textfield(t("URL"), "url", $edit["url"], 50, 255, t("The URL to the RSS/RDF file"));
      $add_form .= form_checkbox(t("Automatically refresh"), "update", 1, 1);
      $add_form .= form_submit(t("Add feed"), "edit[op]");
      $output .= form($add_form, "post", url("admin/system/feeds"));

      $header = array(t("title"), t("items"), t("last update"), array("data" => t("operations"), "colspan" => 2));
      $feeds = db_query("SELECT n.nid, n.title, n.changed, COUNT(i.nid) AS numitems, n.type FROM {node} n LEFT JOIN {item} i ON n.nid = i.parent GROUP BY n.nid HAVING n.type = \"feed\""); 
      while ($feed = db_fetch_object($feeds)) {
        $refresh = form_hidden("nid", "$feed->nid");
        $refresh .= form_submit(t("Refresh"), "edit[op]");
        $rows[] = array(
            l(check_output($feed->title), "node/view/$feed->nid", array("title" => t("View this news feed."))),
            $feed->numitems,
            format_interval(time() - $feed->changed),
            l(t("administer"), "admin/node/edit/$feed->nid", array("title" => t("administer this news feed."))),
            form($refresh, "post", "admin/system/feeds")
            );
      }
      $output .= theme("table", $header, $rows);
    }
  }
  else {
    $output .= message_na();
  }

  print theme('page', $output);
}

function feed_get_feeds() {
  $nodes = array("0" => "<none>");

  $result = db_query("SELECT nid, title FROM {node} WHERE (status = '1') AND (type = \"feed\") ORDER BY title");
  while ($row = db_fetch_object($result)) {
    $nodes[$row->nid] = $row->title;
  }

  return $nodes;
}

function feed_add_from_url($url, $refresh = 0) {
  $tmp_feed = NULL;
  $content = _feed_get($url, $tmp_feed);
  $info = rss_parse($content);

  if (!$info) {
    watchdog("error", t("Error while parsing %url", array("%url" => $url)));
  }
  else {
    $created = $info->lastBuildDate ? $info->lastBuildDate : time();
    $fields = array(
        "type" => "feed",
        "title" => $info->title,
        "teaser" => $info->description,
        "body" => $info->description,
        "status" => 1,
        "moderate" => "0",
        "comment" => "0",
        "promote" => "0",
        "revision" => "0",
        "created" => $created,
        "url" => $url,
        "link" => $info->link,
        "creator" => $info->creator,
        "refresh" => variable_get("feed_refresh", "60"),
        "expire" => variable_get("feed_expire", "2419200"),
        "items_promote" => variable_get("feed_items_promote", "0"),
        "items_moderate" => variable_get("feed_items_moderate", "0"),
        "items_comment" => variable_get("feed_items_comment", "0")
        );
    $node = node_validate($fields, $error);

    if (!$node->error) {
      if (node_access("create", $node)) {
        $nid = node_save($node, array_merge($fields, module_invoke($node->type, "save", "create", $node)));
        if ($nid) {
          if ($refresh) {
            feed_refresh(node_load(array("nid" => $nid)));
          }
          else {
            drupal_set_message("feed successfully added.");
          }
        }
        else {
          watchdog("error", "could not create news item");
        }
      }
    }
    else {
      watchdog("error", "creation of feed node failed : " . $node->error);
    } 
 
  }
  return $output;
}

function feed_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $feeds = db_query("SELECT nid, title FROM {node} WHERE (status = '1') AND (type = \"feed\") ORDER BY nid");
    $num = 0;
    while ($feed = db_fetch_object($feeds)) {
      $block[$num]["info"] = t($feed->title);
      $num++;
    }
    return $block; 
  }
  else {
    if (user_access("access news feeds")) {
      $nid = array_shift(db_fetch_array(db_query("SELECT nid, title FROM {node} WHERE (status = '1') AND (type = \"feed\") ORDER BY nid LIMIT $delta, 1")));
      $feed = node_load(array("nid" => $nid));
      $items = db_query("SELECT n.nid, n.title FROM {node} n, {item} i WHERE (n.nid = i.nid) AND (i.parent = '%s') ORDER BY i.weight DESC, n.created DESC, n.title LIMIT 10", $nid);
      $block["subject"] = t($feed->title);
      $block["content"] = node_title_list($items);
      $block["content"] .= "<div align=\"right\">". l(t("more"), "node/view/$nid") ."</div>\n";
    }
    return $block;
  }
}

function feed_import($op) {
  if ($op == "sources") {
    $result = db_query("SELECT nid FROM {node} WHERE (status = '1') AND (type = \"feed\") ORDER BY title");
    while ($source = db_fetch_object($result)) {
      $sources[] = $source->nid;
    }
    return $sources;
  }
}

// RSS parse functions

function rss_date_utime($adate) {
  $pattern = "/
    ^(\d{4})-(\d{2})-(\d{2})
    ([T\s]?(\d{2}):(\d{2}):?(\d{2})?\.?(\d{2})?
     (Z|([\+\-]\d{2}):(\d{2}))?)?$
    /xi";

  if (!preg_match($pattern, $adate, $matches)) {
    return strtotime($adate);
  }

  $year = $matches[1];
  $month = $matches[2];
  $day = $matches[3];
  $hour = (isset($matches[5]) ? $matches[5] : 0);
  $minute = (isset($matches[6]) ? $matches[6] : 0);
  $second = (isset($matches[7]) ? $matches[7] : 0);
  $centisecond = (isset($matches[8]) ? $matches[8] : 0);
  $tz_hours = (isset($matches[10]) ? $matches[10] : 0);
  $tz_minutes = (isset($matches[11]) ? $matches[11] : 0);

  /// $tz_hours is signed, so we can just add it
  $hour -= $tz_hours;
  /// $tz_minutes is unsigned, so we take sign from $tz_hours
  if (substr($tz_hours, 0, 1) == "-")
  {
    $minute += $tz_minutes;
  }
  else
  {
    $minute -= $tz_minutes;	
  }
  return gmmktime($hour, $minute, $second, $month, $day, $year);
}

function rss_xml_elemStart($parser, $tag, $attribs) {
  global $rss;

  switch ($tag) {
    case "RSS":
      $rss->_type = 0; // RSS 0.9x, RSS 2.0
      break;
    case "HTTP://WWW.W3.ORG/1999/02/22-RDF-SYNTAX-NS#:RDF":
      $rss->_type = 1; // RSS 1.0
      break;
    case "HTTP://PURL.ORG/RSS/1.0/:CHANNEL":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:CHANNEL":
    case "CHANNEL":
      $rss->_section = "channel";
      break;
    case "HTTP://PURL.ORG/RSS/1.0/:ITEMS":
    case "HTTP://PURL.ORG/RSS/1.0/:IMAGE":
    case "HTTP://PURL.ORG/RSS/1.0/:TEXTINPUT":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:IMAGE":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:TEXTINPUT":
    case "IMAGE":
    case "TEXTINPUT":
      unset($rss->_section);
      break;
    case "HTTP://PURL.ORG/RSS/1.0/:ITEM":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:ITEM":
    case "ITEM":
      $rss->_section = "item";
      $rss->_item = array();
      break;
    default:
      $rss->_currentTag = $tag;
  }
}

function rss_xml_elemEnd($parser, $tag) {
  global $rss;

  if (isset($rss->_section) && ($rss->_section != "")) {
    switch($tag) {
      case "HTTP://PURL.ORG/RSS/1.0/:ITEM":
      case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:ITEM":
      case "ITEM":
        unset($rss->_section);
        if (isset($rss->_item["date"])) {
          $rss->_item["date"] = rss_date_utime($rss->_item["date"]);
        }
        $rss->items[] = $rss->_item;
        unset($rss->_item);
        break;
    }
  }
  else {
    switch ($tag) {
      case "HTTP://PURL.ORG/RSS/1.0/:CHANNEL":
      case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:CHANNEL":
      case "CHANNEL":
        if (isset($rss->date)) {
          $rss->date = rss_date_utime($rss->date);
        }
        if (isset($rss->lastBuildDate)) {
          $rss->lastBuildDate = rss_date_utime($rss->lastBuildDate);
        }
        unset($rss->_section);
        break;
      case "HTTP://PURL.ORG/RSS/1.0/:IMAGE":
      case "HTTP://PURL.ORG/RSS/1.0/:TEXTINPUT":
      case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:IMAGE":
      case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:TEXTINPUT":
      case "IMAGE":
      case "TEXTINPUT":
        $rss->_section = "channel";
        break;
      case "HTTP://PURL.ORG/RSS/1.0/:ITEMS":
        unset($rss->_section);
        break;
    }
  }

  unset($rss->_currentTag);
}

function rss_xml_cdata($parser, $data) {
  global $rss;

  if (isset($rss->_section) && ($rss->_section != "") && (isset($rss->_currentTag)) && ($rss->_currentTag != "") && ($data != "")) {
    switch ($rss->_section) {
      case "channel":
        $tag = _rss_xml_channel_tagtr($rss->_currentTag);
        if ($tag != "") {
          $rss->$tag .= $data;
        }
        break;
      case "item":
        $tag = _rss_xml_item_tagtr($rss->_currentTag);
        if ($tag != "") {
          $rss->_item[$tag] .= $data;
        }
        break;
    }
  }
}

function _rss_xml_channel_tagtr($tag) {
  switch ($tag) {
    case "TITLE":
    case "HTTP://PURL.ORG/RSS/1.0/:TITLE":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:TITLE":
      return "title";
      break;
    case "LINK":
    case "HTTP://PURL.ORG/RSS/1.0/:LINK":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:LINK":
      return "link";
      break;
    case "DESCRIPTION":
    case "HTTP://PURL.ORG/RSS/1.0/:DESCRIPTION":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:DESCRIPTION":
      return "description";
      break;
    case "LANGUAGE":
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:LANGUAGE":
      return "language";
      break;
    case "COPYRIGHT":
      return "copyright";
      break;
    case "MANAGINGEDITOR":
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:PUBLISHER":
      return "publisher";
      break;
    case "WEBMASTER":
      return "creator";
      break;
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:CREATOR":
      return "dc_creator";
      break;
    case "PUBDATE":
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:DATE":
      return "date";
      break;
    case "LASTBUILDDATE":
      return "lastBuildDate";
      break;
    case "GENERATOR":
    case "HTTP://WEBNS.NET/MVCB/:GENERATORAGENT":
      return "generator";
      break;
    case "TTL":
      return "ttl";
      break;
    case "RATING":
      return "rating";
      break;
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:SUBJECT":
      return "dc_subject";
    default:
      return "";
  }
}

function _rss_xml_item_tagtr($tag) {
  switch ($tag) {
    case "TITLE":
    case "HTTP://PURL.ORG/RSS/1.0/:TITLE":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:TITLE":
      return "title";
      break;
    case "LINK":
    case "HTTP://PURL.ORG/RSS/1.0/:LINK":
    case "HTTP://MY.NETSCAPE.COM/RDF/SIMPLE/0.9:LINK":
      return "link";
      break;
    case "DESCRIPTION":
    case "HTTP://PURL.ORG/RSS/1.0/:DESCRIPTION":
      return "description";
      break;
    case "AUTHOR":
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:CREATOR":
      return "creator";
      break;
    case "COMMENTS":
      return "comments";
      break;
    case "GUID":
      return "guid";
      break;
    case "PUBDATE":
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:DATE":
      return "date";
      break;
    case "HTTP://PURL.ORG/DC/ELEMENTS/1.1/:SUBJECT":
      return "dc_subject";
      break;
    default:
      return "";
  }
}

function rss_parse($text) {
  global $rss;

  $rss = new StdClass;

  $parser = xml_parser_create_ns();
  xml_set_element_handler($parser, "rss_xml_elemStart", "rss_xml_elemEnd");
  xml_set_character_data_handler($parser, "rss_xml_cdata");
  xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "utf-8");
  if (!xml_parse($parser, $text, 1)) {
    watchdog("error", t("failed to parse RSS feed : %error at line %line.", array("%error" => xml_error_string(xml_get_error_code($parser)), "%line" => xml_get_current_line_number($parser))));
    return false;
  }
  xml_parser_free($parser);

  return $rss;
}

?>
